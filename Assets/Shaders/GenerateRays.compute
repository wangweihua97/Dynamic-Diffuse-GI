#pragma kernel CSMain
#define RAYS_PER_PROBE 64
#define pi 3.1415926535

#include "GridHelpers.hlsl"


StructuredBuffer<float3x3>        randomOrientation;
StructuredBuffer<IrradianceField> L;

RWTexture2D<float4> rayOrigin;
RWTexture2D<float4> rayDirection;

float3 sphericalFibonacci(float i, float n) {
    const float PHI = sqrt(5) * 0.5 + 0.5;
#   define madfrac(A, B) ((A)*(B)-floor((A)*(B)))
    float phi = 2.0 * pi * madfrac(i, PHI - 1);
    float cosTheta = 1.0 - (2.0 * i + 1.0) * (1.0 / n);
    float sinTheta = sqrt(saturate(1.0 - cosTheta * cosTheta));

    return float3(
        cos(phi) * sinTheta,
        sin(phi) * sinTheta,
        cosTheta);

#   undef madfrac
}

/*
    Compute 3D worldspace position from gridcoord based on starting
    location and distance between probes.
*/
float3 gridCoordToPosition(int3 c) {
    return L[0].probeStep * float3(c) + L[0].probeStartPosition;
}

/*
    Compute the grid coordinate of the probe from the index
*/
int3 probeIndexToGridCoord(int index) {
    // Slow, but works for any # of probes
    int3 iPos;
    iPos.x = index % L[0].probeCounts.x;
    iPos.y = (index % (L[0].probeCounts.x * L[0].probeCounts.y)) / L[0].probeCounts.x;
    iPos.z = index / (L[0].probeCounts.x * L[0].probeCounts.y);

    // Assumes probeCounts are powers of two.
    // Saves ~10ms compared to the divisions above
    // Precomputing the MSB actually slows this code down substantially
    /*
    ivec3 iPos;
    iPos.x = index & (L[0].probeCounts.x - 1);
    iPos.y = (index & ((L[0].probeCounts.x * L[0].probeCounts.y) - 1)) >> findMSB(L[0].probeCounts.x);
    iPos.z = index >> findMSB(L[0].probeCounts.x * L[0].probeCounts.y);*/

    return iPos;
}

/*
    Compute the 3D probe location in world space from the probe index
*/
float3 probeLocation(int index) {
    return gridCoordToPosition(L[0], probeIndexToGridCoord(L[0], index));
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int w,h;
    rayOrigin.GetDimensions(w,h);
    
   int probeID = id.y;
   int rayID   = id.x;
   float rayMinDistance = 0.08;

    rayOrigin[id.xy]  = float4(probeLocation(probeID), rayMinDistance);
    rayDirection[id.xy]  = float4(normalize(mul(randomOrientation[0] , sphericalFibonacci(rayID, RAYS_PER_PROBE))), 1);
}